<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace FastPix\Sdk\Models\Components;


class CreateMediaRequest
{
    /**
     * $inputs
     *
     * @var array<VideoInput|WatermarkInput|AudioInput|SubtitleInput> $inputs
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('inputs')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\FastPix\Sdk\Models\Components\VideoInput|\FastPix\Sdk\Models\Components\WatermarkInput|\FastPix\Sdk\Models\Components\AudioInput|\FastPix\Sdk\Models\Components\SubtitleInput>')]
    public array $inputs;

    /**
     * Determines whether access to the streamed content is kept private or available to all.
     *
     *
     *
     * @var CreateMediaRequestAccessPolicy $accessPolicy
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accessPolicy')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\CreateMediaRequestAccessPolicy')]
    public CreateMediaRequestAccessPolicy $accessPolicy;

    /**
     * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
     *
     *
     *
     * @var ?CreateMediaRequestMetadata $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\CreateMediaRequestMetadata|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CreateMediaRequestMetadata $metadata = null;

    /**
     * Generates subtitle files for audio/video files.
     *
     *
     *
     * @var ?Subtitle $subtitle
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('subtitle')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\Subtitle|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Subtitle $subtitle = null;

    /**
     * â€œcapped_4k": Generates an mp4 video file up to 4k resolution "audioOnly": Generates an m4a audio file of the media file "audioOnly,capped_4k": Generates both video and audio media files for offline viewing
     *
     *
     *
     * @var ?CreateMediaRequestMp4Support $mp4Support
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('mp4Support')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\CreateMediaRequestMp4Support|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CreateMediaRequestMp4Support $mp4Support = null;

    /**
     * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
     *
     * @var ?bool $sourceAccess
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sourceAccess')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $sourceAccess = null;

    /**
     *
     * @var ?Summary $summary
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('summary')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\Summary|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Summary $summary = null;

    /**
     * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
     *
     *
     *
     * @var ?bool $chapters
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('chapters')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $chapters = null;

    /**
     * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
     *
     *
     *
     * @var ?bool $namedEntities
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('namedEntities')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $namedEntities = null;

    /**
     *
     * @var ?Moderation $moderation
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('moderation')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\Moderation|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Moderation $moderation = null;

    /**
     *
     * @var ?CreateMediaRequestAccessRestrictions $accessRestrictions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accessRestrictions')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\CreateMediaRequestAccessRestrictions|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CreateMediaRequestAccessRestrictions $accessRestrictions = null;

    /**
     * normalize volume of the audio track. This is available for pre-recorded content only.
     *
     *
     *
     * @var ?bool $optimizeAudio
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('optimizeAudio')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $optimizeAudio = null;

    /**
     * The maximum resolution tier determines the highest quality your media will be available in.
     *
     *
     *
     * @var ?CreateMediaRequestMaxResolution $maxResolution
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('maxResolution')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\CreateMediaRequestMaxResolution|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CreateMediaRequestMaxResolution $maxResolution = null;

    /**
     * @param  array<VideoInput|WatermarkInput|AudioInput|SubtitleInput>  $inputs
     * @param  CreateMediaRequestAccessPolicy  $accessPolicy
     * @param  ?CreateMediaRequestMetadata  $metadata
     * @param  ?Subtitle  $subtitle
     * @param  ?CreateMediaRequestMp4Support  $mp4Support
     * @param  ?bool  $sourceAccess
     * @param  ?bool  $optimizeAudio
     * @param  ?CreateMediaRequestMaxResolution  $maxResolution
     * @param  ?Summary  $summary
     * @param  ?bool  $chapters
     * @param  ?bool  $namedEntities
     * @param  ?Moderation  $moderation
     * @param  ?CreateMediaRequestAccessRestrictions  $accessRestrictions
     * @phpstan-pure
     */
    public function __construct(array $inputs, CreateMediaRequestAccessPolicy $accessPolicy, ?CreateMediaRequestMetadata $metadata = null, ?Subtitle $subtitle = null, ?CreateMediaRequestMp4Support $mp4Support = null, ?bool $sourceAccess = null, ?Summary $summary = null, ?bool $chapters = null, ?bool $namedEntities = null, ?Moderation $moderation = null, ?CreateMediaRequestAccessRestrictions $accessRestrictions = null, ?bool $optimizeAudio = false, ?CreateMediaRequestMaxResolution $maxResolution = CreateMediaRequestMaxResolution::OneThousandAndEightyp)
    {
        $this->inputs = $inputs;
        $this->accessPolicy = $accessPolicy;
        $this->metadata = $metadata;
        $this->subtitle = $subtitle;
        $this->mp4Support = $mp4Support;
        $this->sourceAccess = $sourceAccess;
        $this->summary = $summary;
        $this->chapters = $chapters;
        $this->namedEntities = $namedEntities;
        $this->moderation = $moderation;
        $this->accessRestrictions = $accessRestrictions;
        $this->optimizeAudio = $optimizeAudio;
        $this->maxResolution = $maxResolution;
    }
}
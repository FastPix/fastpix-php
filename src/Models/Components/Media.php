<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace FastPix\Sdk\Models\Components;


class Media
{
    /**
     * A video thumbnail is a still image that acts as the preview image for your video.
     *
     * @var ?string $thumbnail
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('thumbnail')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $thumbnail = null;

    /**
     * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     * A unique identifier is generated by FastPix for the workspace.
     *
     * @var ?string $workspaceId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('workspaceId')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $workspaceId = null;

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     *
     * @var ?MediaMetadata $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\MediaMetadata|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?MediaMetadata $metadata = null;

    /**
     * Determines the media's status, which can be one of the possible values.
     *
     * @var ?string $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $status = null;

    /**
     * Determines the type of MP4 support for the media.   - **none**: Disables MP4 support.   - **capped_4k**: Enables MP4 downloads with resolutions up to 4K.   - **audioOnly**: Provides an MP4 stream containing only the audio.   - **audioOnly,capped_4k**: Enables both MP4 video downloads (up to 4K) and an audio-only stream.
     *
     * @var ?MediaMp4Support $mp4Support
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('mp4Support')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\MediaMp4Support|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?MediaMp4Support $mp4Support = null;

    /**
     * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
     *
     * @var ?bool $sourceAccess
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sourceAccess')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $sourceAccess = null;

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     *
     * @var ?array<PlaybackId> $playbackIds
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('playbackIds')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\FastPix\Sdk\Models\Components\PlaybackId>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $playbackIds = null;

    /**
     * A media consists of different media tracks, like video, audio, and subtitle, all combined.
     *
     * @var ?array<Track> $tracks
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tracks')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\FastPix\Sdk\Models\Components\Track>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $tracks = null;

    /**
     * The time span of the media, measured in seconds with a maximum allowable duration of 12 hours per individual media.
     *
     * @var ?string $duration
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('duration')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $duration = null;

    /**
     * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
     *
     * @var ?string $frameRate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('frameRate')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $frameRate = null;

    /**
     * The aspect ratio of a video is a value that describes the relative shape of a video based on its width and height.
     *
     * @var ?string $aspectRatio
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('aspectRatio')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $aspectRatio = null;

    /**
     * Time the media was created, defined as a localDateTime (UTC Time).
     *
     * @var ?\DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('createdAt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $createdAt = null;

    /**
     * Time the media was updated, defined as a localDateTime (UTC Time).
     *
     * @var ?\DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updatedAt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $updatedAt = null;

    /**
     * The maximum resolution specified by the user for the media.
     *
     * @var ?MediaMaxResolution $maxResolution
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('maxResolution')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\MediaMaxResolution|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?MediaMaxResolution $maxResolution = null;

    /**
     * The actual resolution of the uploaded media. This represents the native quality of the source media.
     *
     * @var ?SourceResolution $sourceResolution
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sourceResolution')]
    #[\Speakeasy\Serializer\Annotation\Type('\FastPix\Sdk\Models\Components\SourceResolution|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?SourceResolution $sourceResolution = null;

    /**
     * @param  ?string  $thumbnail
     * @param  ?string  $id
     * @param  ?string  $workspaceId
     * @param  ?MediaMetadata  $metadata
     * @param  ?MediaMaxResolution  $maxResolution
     * @param  ?SourceResolution  $sourceResolution
     * @param  ?string  $status
     * @param  ?MediaMp4Support  $mp4Support
     * @param  ?bool  $sourceAccess
     * @param  ?array<PlaybackId>  $playbackIds
     * @param  ?array<Track>  $tracks
     * @param  ?string  $duration
     * @param  ?string  $frameRate
     * @param  ?string  $aspectRatio
     * @param  ?\DateTime  $createdAt
     * @param  ?\DateTime  $updatedAt
     * @phpstan-pure
     */
    public function __construct(?string $thumbnail = null, ?string $id = null, ?string $workspaceId = null, ?MediaMetadata $metadata = null, ?string $status = null, ?MediaMp4Support $mp4Support = null, ?bool $sourceAccess = null, ?array $playbackIds = null, ?array $tracks = null, ?string $duration = null, ?string $frameRate = null, ?string $aspectRatio = null, ?\DateTime $createdAt = null, ?\DateTime $updatedAt = null, ?MediaMaxResolution $maxResolution = MediaMaxResolution::OneThousandAndEightyp, ?SourceResolution $sourceResolution = SourceResolution::OneThousandAndEightyp)
    {
        $this->thumbnail = $thumbnail;
        $this->id = $id;
        $this->workspaceId = $workspaceId;
        $this->metadata = $metadata;
        $this->status = $status;
        $this->mp4Support = $mp4Support;
        $this->sourceAccess = $sourceAccess;
        $this->playbackIds = $playbackIds;
        $this->tracks = $tracks;
        $this->duration = $duration;
        $this->frameRate = $frameRate;
        $this->aspectRatio = $aspectRatio;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->maxResolution = $maxResolution;
        $this->sourceResolution = $sourceResolution;
    }
}